<?php

namespace Erp\PropertyBundle\Repository;

use Doctrine\ORM\Mapping\ClassMetadata;
use Doctrine\ORM\Query\Expr;
use Erp\UserBundle\Entity\User;
use Erp\PropertyBundle\Entity\Property;
use Erp\PropertyBundle\Entity\PropertySecurityDeposit;

/**
 * PropertySecurityDepositRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PropertySecurityDepositRepository extends \Doctrine\ORM\EntityRepository {
    
    /**
     * 
     * @param User $manager
     * @param User $landlord
     * @param type $year
     * @param type $month
     * @return type
     */
    public function findRecordsForManagerStatement(User $manager, User $landlord, $year, $month) {
        $sqlIncome = $this->getSqlIncomesForManagerStatement($manager, $landlord, $year, $month);
        $sqlExpenses = $this->getSqlExpensesForManagerStatement($manager, $landlord, $year, $month);
        
        $sql = 'SELECT * FROM ((' . $sqlIncome . ') AS income), ((' . $sqlExpenses . ') AS expenses)';
        
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();
        
        return $stmt->fetchAll();
    }

    /**
     * 
     * @param \Erp\UserBundle\Entity\User $user
     * @param int $year
     * @param int $month
     * @return array
     */
    public function findRecordsForStatement(User $user, $year, $month = 0) {
        $em = $this->getEntityManager();
        
        $thisMetadata = $this->getClassMetadata();
        $propertyMetadata = $em->getClassMetadata(Property::class);

        $userTable = $em->getClassMetadata(User::class)->getTableName();
        $propertyTable = $propertyMetadata->getTableName();
        $depositTable = $thisMetadata->getTableName();

        $amountField = $thisMetadata->getColumnName('amount');
        $statusField = $thisMetadata->getColumnName('status');
        
        $paidAtField = $thisMetadata->getColumnName('paidAt');
        $refundedAtField = $thisMetadata->getColumnName('refundedAt');

        $sqlIncome = $this->getSqlIncomesForStatement($statusField, $amountField, $userTable,
                $propertyTable, $depositTable, $paidAtField, $propertyMetadata, $user, $year, $month);
        
        $sqlExpenses = $this->getSqlExpensesForStatement($statusField, $amountField, $userTable,
                $propertyTable, $depositTable, $refundedAtField, $propertyMetadata, $user, $year, $month);

        $sql = 'SELECT * FROM ((' . $sqlIncome . ') AS income), ((' . $sqlExpenses . ') AS expenses)';
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->execute();

        return $stmt->fetchAll()[0];
    }

    /**
     * 
     * @param string $statusField
     * @param string $sumField
     * @param string $uTable
     * @param string $propTable
     * @param string $depTable
     * @param string $dateField
     * @param ClassMetadata $propMetadata
     * @param User $user
     * @param int $year
     * @param int $month
     * @return string
     */
    protected function getSqlIncomesForStatement($statusField, $sumField, $uTable, $propTable,
            $depTable, $dateField, ClassMetadata $propMetadata, User $user, $year, $month = 0) {
        $sql = 'SELECT
                    COALESCE(SUM(CASE WHEN d.' . $statusField . ' = \'' . PropertySecurityDeposit::STATUS_DEPOSIT_PAID . '\' THEN d.' . $sumField . ' END), 0) AS securityDepositsIncome
                FROM ' . $uTable . ' u
                    INNER JOIN ' . $propTable . ' p ON u.id = p.' . $propMetadata->getAssociationMappings()['user']['joinColumns'][0]['name'] . '
                    INNER JOIN ' . $depTable . ' d ON d.id = p.' . $propMetadata->getAssociationMappings()['securityDeposit']['joinColumns'][0]['name'] . '
                WHERE u.id = ' . $user->getId() . '
                AND YEAR(d.' . $dateField . ') = ' . $year
        ;

        if ($month != 0) {
            $sql .= ' AND MONTH(d.' . $dateField . ') = ' . $month;
        }

        return $sql;
    }

    /**
     * 
     * @param string $statusField
     * @param string $sumField
     * @param string $uTable
     * @param string $propTable
     * @param string $depTable
     * @param string $dateField
     * @param User $user
     * @param int $year
     * @param int $month
     * @return string
     */
    protected function getSqlExpensesForStatement($statusField, $sumField, $uTable, $propTable,
            $depTable, $dateField, ClassMetadata $propMetadata, User $user, $year, $month = 0) {
        $sql = 'SELECT
                    COALESCE(SUM(CASE WHEN (d.' . $statusField . ' = \'' . PropertySecurityDeposit::STATUS_DEPOSIT_REFUNDED_PARTIAL . '\'
                        OR d.' . $statusField . ' = \'' . PropertySecurityDeposit::STATUS_DEPOSIT_REFUNDED_TOTAL . '\') THEN d.' . $sumField . ' END), 0) AS securityDepositsExpenses
                FROM ' . $uTable . ' u
                    INNER JOIN ' . $propTable . ' p ON u.id = p.' . $propMetadata->getAssociationMappings()['user']['joinColumns'][0]['name'] . '
                    INNER JOIN ' . $depTable . ' d ON d.id = p.' . $propMetadata->getAssociationMappings()['securityDeposit']['joinColumns'][0]['name'] . '
                WHERE u.id = ' . $user->getId() . '
                AND YEAR(d.' . $dateField . ') = ' . $year
        ;

        if ($month != 0) {
            $sql .= ' AND MONTH(d.' . $dateField . ') = ' . $month;
        }

        return $sql;
    }
    
    /**
     * Get the SQL for incomes, for detailed statements requested by the $manager
     * for the $landord.
     * In this case, it is necessary to filter on the properties that are
     * managed by $manager and owned by $landlord, and take the paid
     * ErpPropertyBundle:PropertySecurityDeposit items.
     * 
     * @param User $manager
     * @param User $landlord
     * @param string $year
     * @param string $month
     * @return string the SQL string for incomes for the $manager from the $landlord
     */
    protected function getSqlIncomesForManagerStatement(User $manager, User $landlord, $year, $month) {
        $incomeTypes = array(
            PropertySecurityDeposit::STATUS_DEPOSIT_PAID
        );
        
        $qb = $this->createQueryBuilder('psd');
        
        return $qb->select('psd.paidAt AS dateCreated')
                ->addSelect($landlord->getFullName() . ' AS payer')
                ->addSelect($manager->getFullName() . ' AS payee')
                ->addSelect('psd.id AS id')
                ->addSelect('CONCAT(\'Deposit paid for property #\', p.id) AS description')
                ->addSelect('CAST(psd.amount AS UNSIGNED) AS income')
                ->addSelect('0 as expense')
                ->join(Property::REPOSITORY, 'p', Expr\Join::WITH, 'psd = p.securityDeposit')
                ->where($qb->expr()->eq('p.user', ':managerId'))
                ->where($qb->expr()->eq('p.landlordUser', ':landlordId'))
                ->andWhere($qb->expr()->eq('YEAR(psd.paidAt'), ':year')
                ->andWhere($qb->expr()->eq('MONTH(psd.paidAt'), ':month')
                ->andWhere($qb->expr()->in('psd.status', ':incomeTypes'))
                ->setParameter('managerId', $manager->getId())
                ->setParameter('landlordId', $landlord->getId())
                ->setParameter('year', $year)
                ->setParameter('month', $month)
                ->setParameter('incomeTypes', $incomeTypes)
                ->getQuery()
                ->getSQL()
        ;
    }
    
    /**
     * Get the SQL for incomes, for detailed statements requested by the $manager
     * for the $landord.
     * In this case, it is necessary to filter on the properties that are
     * managed by $manager and owned by $landlord, and take the refunded or
     * partially refunded ErpPropertyBundle:PropertySecurityDeposit items.
     * 
     * @param User $manager
     * @param User $landlord
     * @param string $year
     * @param string $month
     * @return string the SQL string for incomes for the $manager from the $landlord
     */
    protected function getSqlExpensesForManagerStatement(User $manager, User $landlord, $year, $month) {
        $expenseTypes = array(
            PropertySecurityDeposit::STATUS_DEPOSIT_REFUNDED_PARTIAL,
            PropertySecurityDeposit::STATUS_DEPOSIT_REFUNDED_TOTAL
        );
        
        $qb = $this->createQueryBuilder('psd');
        
        $stringSqlDescription = 'CONCAT(\'Deposit\',
            (CASE WHEN psd.status = \'' . PropertySecurityDeposit::STATUS_DEPOSIT_REFUNDED_PARTIAL .
                ' THEN \' partially\' ELSE \' totally \'), \'refunded for property #\', p.id)';

        return $qb->select('psd.paidAt AS dateCreated')
                ->addSelect($manager->getFullName() . ' AS payer')
                ->addSelect($landlord->getFullName() . ' AS payee')
                ->addSelect('psd.id AS id')
                ->addSelect($stringSqlDescription . ' AS description')
                ->addSelect('0 as income')
                ->addSelect('CAST(psd.amount AS UNSIGNED) AS expense')
                ->join(Property::REPOSITORY, 'p', Expr\Join::WITH, 'psd = p.securityDeposit')
                ->where($qb->expr()->eq('p.user', ':managerId'))
                ->where($qb->expr()->eq('p.landlordUser', ':landlordId'))
                ->andWhere($qb->expr()->eq('YEAR(psd.refundedAt'), ':year')
                ->andWhere($qb->expr()->eq('MONTH(psd.refundedAt'), ':month')
                ->andWhere($qb->expr()->in('psd.status', ':expenseTypes'))
                ->setParameter('managerId', $manager->getId())
                ->setParameter('landlordId', $landlord->getId())
                ->setParameter('year', $year)
                ->setParameter('month', $month)
                ->setParameter('expenseTypes', $expenseTypes)
                ->getQuery()
                ->getSQL()
        ;
    }

}
