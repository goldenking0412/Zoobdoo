<?php

namespace Erp\PropertyBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Erp\PropertyBundle\Entity\Property;
use Erp\PropertyBundle\Model\PropertyFilter;
use Erp\UserBundle\Entity\User;

/**
 * PropertyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PropertyRepository extends EntityRepository {

    const ID_SEPARATOR = '~';

    /**
     * 
     * @param User $landlord
     * @return type
     */
    public function findAvailablePropertiesByLandlord(User $landlord) {
        $qb = $this->createQueryBuilder('p');

        return $qb->where($qb->expr()->eq('p.landlordUser', ':landlord'))
                        ->andWhere($qb->expr()->neq('p.status', ':statusDeleted'))
                        ->setParameter('landlord', $landlord)
                        ->setParameter('statusDeleted', Property::STATUS_DELETED)
                        ->getQuery()
                        ->getResult()
        ;
    }

    /**
     * @param \Erp\UserBundle\Entity\User $user
     *
     * @return array
     */
    public function findAvailable(User $user = null) {
        $result = [];
        if ($user && $user->hasRole(User::ROLE_TENANT)) {
            $result = $this->findAvailableByUser($user);
        }

        if (!$result) {
            $result = $this->getQbForAvailableByDate();
        }

        return $result;
    }

    /**
     * Get QueryBuilder for available properties by updated date
     *
     * @param int $cntNeedle
     * @param array $notInclude
     *
     * @return array
     */
    public function getQbForAvailableByDate($cntNeedle = Property::LIMIT_AVAILABLE_PER_PAGE, array $notInclude = []) {
        $qb = $this->createQueryBuilder('pr');

        $qb
                ->where($qb->expr()->eq('pr.status', ':status'))
                ->setParameter('status', Property::STATUS_AVAILABLE)
                ->orderBy('pr.updatedDate', 'DESC')
                ->setMaxResults($cntNeedle);

        if ($notInclude) {
            foreach ($notInclude as $exception) {
                $ids[] = $exception->getId();
            }
            $qb = $qb->andWhere($qb->expr()->notIn('pr.id', $ids));
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * 
     * @param User $user
     * @return type
     */
    public function getQueryBuilderByUser(User $user) {
        $qb = $this->createQueryBuilder('p');
        return $qb
                        ->where($qb->expr()->eq('p.user', ':user'))
                        ->setParameter('user', $user)
        ;
    }

    /**
     * @param \Erp\UserBundle\Entity\User $user
     *
     * @return array
     */
    public function findAvailableByUser(User $user) {
        $result = $this->getAvailableByUserPostalCode($user);
        $cntZipAvailable = count($result);

        if ($cntZipAvailable < Property::LIMIT_AVAILABLE_PER_PAGE) {
            $cntNeedleBuyCity = Property::LIMIT_AVAILABLE_PER_PAGE - $cntZipAvailable;
            $cityAvailable = $this->getAvailableByUserCity($user, $cntNeedleBuyCity, $result);
            $result = array_merge($result, $cityAvailable);

            $cntCityAvailable = count($result);
            if ($cntCityAvailable < Property::LIMIT_AVAILABLE_PER_PAGE) {
                $cntNeedleBuyState = Property::LIMIT_AVAILABLE_PER_PAGE - $cntCityAvailable;
                $stateAvailable = $this->getAvailableByUserState($user, $cntNeedleBuyState, $result);
                $result = array_merge($result, $stateAvailable);

                $availableCnt = count($result);
                if ($availableCnt < Property::LIMIT_AVAILABLE_PER_PAGE) {
                    $needleAvailable = Property::LIMIT_AVAILABLE_PER_PAGE - $availableCnt;
                    $availableByDate = $this->getQbForAvailableByDate($needleAvailable, $result);
                    $result = array_merge($result, $availableByDate);
                }
            }
        }

        return $result;
    }

    /**
     * Get Available properties by user zip
     *
     * @param \Erp\UserBundle\Entity\User $user
     *
     * @return array
     */
    public function getAvailableByUserPostalCode(User $user) {
        $qb = $this->getQbForAvailableByUserZip($user);
        return $qb->getQuery()->getResult();
    }

    /**
     * Get Available properties by user city
     *
     * @param User $user
     * @param int $cntNeedleBuyCity
     * @param array $notInclude
     *
     * @return array
     */
    public function getAvailableByUserCity(User $user, $cntNeedleBuyCity, array $notInclude = []) {
        $qb = $this->getQbForAvailableByUserCity($user, $notInclude, $cntNeedleBuyCity);
        return $qb->getQuery()->getResult();
    }

    /**
     * Get Available properties by user state
     *
     * @param User $user
     * @param int $cntNeedleBuyCity
     * @param array $result
     *
     * @return array
     */
    public function getAvailableByUserState(User $user, $cntNeedleBuyCity, array $result = []) {
        $qb = $this->getQbForAvailableByUserState($user, $result, $cntNeedleBuyCity);
        return $qb->getQuery()->getResult();
    }

    /**
     * @param PropertyFilter $propertyFilter
     *
     * @return array
     */
    public function getBySearchParams(PropertyFilter $propertyFilter) {
        $qb = $this->createQueryBuilder('pr');
        $qb
                ->where($qb->expr()->eq('pr.status', ':status'))
                ->setParameter('status', Property::STATUS_AVAILABLE)
        ;
        $qb = $this->modifyQbByParams($qb, $propertyFilter);

        $paginator = new Paginator($qb);
        $propertyFilter->setCountProperties(count($paginator));

        $paginator->getQuery()
                ->setFirstResult(Property::LIMIT_SEARCH_PER_PAGE * ($propertyFilter->getPage() - 1))
                ->setMaxResults(Property::LIMIT_SEARCH_PER_PAGE);

        return $paginator->getQuery()->getResult();
    }

    /**
     * 
     * @param QueryBuilder $qb
     * @param array $idx
     * @return type
     */
    public function addIdentifiersToQueryBuilder(QueryBuilder $qb, array $idx) {
        if (!$idx) {
            return;
        }

        $fieldNames = $this->getClassMetadata()->getIdentifierFieldNames();

        $prefix = uniqid();
        $sqls = array();
        foreach ($idx as $pos => $id) {
            $ids = explode(self::ID_SEPARATOR, $id);

            $ands = array();
            foreach ($fieldNames as $posName => $name) {
                $parameterName = sprintf('field_%s_%s_%d', $prefix, $name, $pos);
                $ands[] = sprintf('%s.%s = :%s', $qb->getRootAlias(), $name, $parameterName);
                $qb->setParameter($parameterName, $ids[$posName]);
            }

            $sqls[] = implode(' AND ', $ands);
        }

        $qb->andWhere(sprintf('( %s )', implode(' OR ', $sqls)));
    }

    /**
     * Return property by user
     *
     * @param User $user
     * @param      $propertyId
     *
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getPropertyByUser(User $user, $propertyId) {
        $qb = $this->createQueryBuilder('pr');

        if ($user->hasRole(User::ROLE_MANAGER)) {
            $field = 'user';
        } elseif ($user->hasRole(User::ROLE_LANDLORD)) {
            $field = 'landlordUser';
        } elseif ($user->hasRole(User::ROLE_TENANT)) {
            $field = 'tenantUser';
        }

        return $qb
                        ->where($qb->expr()->eq('pr.id', ':propertyId'))
                        ->andWhere($qb->expr()->neq('pr.status', ':status'))
                        ->andWhere($qb->expr()->eq('pr.' . $field, ':user'))
                        ->setParameter('propertyId', $propertyId)
                        ->setParameter('status', Property::STATUS_DELETED)
                        ->setParameter('user', $user)
                        ->getQuery()
                        ->getOneOrNullResult()
        ;
    }

    /**
     * 
     * @param User $user
     * @param mixed $interval
     * @param string $type
     * @return type
     */
    public function getPropertiesQuery(User $user, $interval = null, $type = null) {
        $qb = $this->createQueryBuilder('p');

        $qb
                ->join(\Erp\PropertyBundle\Entity\PropertyRentHistory::class, 'prh', Expr\Join::WITH, 'p.id = prh.property')
                ->where($qb->expr()->eq('p.user', ':user'))
                ->setParameter('user', $user)
        ;

        if (is_array($interval)) {
            $year = $interval[0];
            $month = (count($interval) > 1) ? $interval[1] : null;

            $qb
                    ->andWhere($qb->expr()->eq('YEAR(prh.createdAt)', ':year'))
                    ->setParameter('year', $year)
            ;

            if ($month) {
                $qb
                        ->andWhere($qb->expr()->eq('MONTH(prh.createdAt)', ':month'))
                        ->setParameter('month', $month)
                ;
            }
        }

        if ($type) {
            $qb->andWhere(
                    $qb->expr()->in(
                            'prh.status', $type
                    )
            );
        }

        return $qb->getQuery();
    }

    /**
     * 
     * @return type
     */
    public function getScheduledPropertiesForPayment() {
        //TODO Optimize. Get rid of hydration
        $yesterday = (new \DateTime())->modify('-1 day');
        $yesterdayDay = $yesterday->format('j');
        $yesterdayMonth = $yesterday->format('n');

        $qb = $this->createQueryBuilder('p');

        return $qb
                        ->addSelect('tu')
                        ->addSelect('ps')
                        ->join('p.settings', 'ps')
                        ->join('p.tenantUser', 'tu')
                        ->join('tu.rentPaymentBalance', 'rpb')
                        ->where($qb->expr()->eq('ps.dayUntilDue', ':yesterdayDay'))
                        ->andWhere($qb->expr()->neq('MONTH(rpb.lastPaymentAt)', ':currentMonth'))
                        ->setParameter('yesterdayDay', $yesterdayDay)
                        ->setParameter('currentMonth', $yesterdayMonth)
                        ->getQuery()
                        ->getResult()
        ;
    }

    /**
     * 
     * @param type $rentDueDate
     * @return type
     */
    public function getPropertiesByRentDueDate($rentDueDate) {
        $qb = $this->createQueryBuilder('p');

        return $qb
                        ->select('tu')
                        ->join('p.settings', 'ps')
                        ->join('p.tenantUser', 'tu')
                        ->join('p.user', 'u')
                        ->where($qb->expr()->eq('ps.dayUntilDue', ':dayUntilDue'))
                        ->setParameter('dayUntilDue', $rentDueDate)
                        ->getQuery()
                        ->getResult()
        ;
    }

    /**
     * 
     * @param User $user
     * @return type
     */
    public function getDebtors(User $user) {
        $qb = $this->createQueryBuilder('p');

        return $qb->addSelect('tu')
                        ->join('p.user', 'u')
                        ->join('p.tenantUser', 'tu')
                        ->join('tu.rentPaymentBalance', 'rpb')
                        ->where($qb->expr()->eq('p.user', ':user'))
                        ->andWhere($qb->expr()->lt('rpb.balance', '0'))
                        ->setParameter('user', $user)
                        ->getQuery()
                        ->getResult()
        ;
    }

    /**
     * 
     * @param User $user
     * @return type
     */
    public function getPropertiesWithActiveTenant(User $user) {
        $qb = $this->createQueryBuilder('p');

        return $qb->addSelect('tu')
                        ->join('p.user', 'u')
                        ->join('p.tenantUser', 'tu')
                        ->where($qb->expr()->eq('tu.status', ':status'))
                        ->andWhere($qb->expr()->eq('tu.enabled', ':enabled'))
                        ->andWhere($qb->expr()->eq('tu.locked', ':locked'))
                        ->andwhere($qb->expr()->eq('p.user', ':user'))
                        ->setParameter('user', $user)
                        ->setParameter('enabled', true)
                        ->setParameter('locked', false)
                        ->setParameter('status', User::STATUS_ACTIVE)
                        ->getQuery()
                        ->getResult()
        ;
    }

    /**
     * 
     * @param Property $property
     * @param User $user
     * @return type
     */
    public function getPropertiesListExceptCurrent(Property $property, User $user) {
        $qb = $this->createQueryBuilder('p');

        return $qb
                        ->where($qb->expr()->eq('p.user', ':user'))
                        ->andWhere($qb->expr()->neq('p.status', ':status'))
                        ->setParameter('status', Property::STATUS_DELETED)
                        ->andWhere($qb->expr()->neq('p.id', $property->getId()))
                        ->setParameter('user', $user)
                        ->getQuery()
                        ->getResult()
        ;
    }

    /**
     * @param \Erp\UserBundle\Entity\User $user
     * @param $filters
     *
     * @return array
     */
    public function findBySearchBar(User $user, $filters) {
        $qb = $this->createQueryBuilder('p');

        return $qb->addSelect('lu')
                        ->addSelect('tu')
                        ->join('p.user', 'u')
                        ->leftJoin('p.tenantUser', 'tu')
                        ->leftJoin('p.landlordUser', 'lu')
                        ->where(
                                $qb->expr()->orX(
                                        $qb->expr()->eq('u', ':user1'),
                                        $qb->expr()->eq('tu', ':user2'),
                                        $qb->expr()->eq('lu', ':user3')
                                )
                        )
                        ->andWhere('p.name LIKE :keyword OR
                            u.firstName LIKE :keyword OR
                            u.lastName LIKE :keyword OR
                            tu.firstName LIKE :keyword OR
                            tu.lastName LIKE :keyword OR
                            lu.firstName LIKE :keyword OR
                            lu.lastName LIKE :keyword OR
                            p.address LIKE :keyword OR
                            p.zip LIKE :keyword OR
                            p.stateCode LIKE :keyword')
                        ->andWhere($qb->expr()->neq('p.status', ':status'))
                        ->setParameter('user1', $user)
                        ->setParameter('user2', $user)
                        ->setParameter('user3', $user)
                        ->setParameter('keyword', '%' . $filters['keyword'] . '%')
                        ->setParameter('status', Property::STATUS_DELETED)
                        ->getQuery()
                        ->getResult()
        ;
    }

    /**
     * 
     * @param User $user
     * @param type $checkDate
     * @return type
     */
    public function getRentLatePropertiesListForEviction(User $user, $checkDate) {
        $qb = $this->createQueryBuilder('p');

        return $qb->select('tu')
                        ->join('p.settings', 'ps')
                        ->join('p.user', 'u')
                        ->join('p.tenantUser', 'tu')
                        ->join('tu.rentPaymentBalance', 'rpb')
                        ->where($qb->expr()->eq('p.user', ':user'))
                        ->andWhere($qb->expr()->lt('rpb.balance', '0'))
                        ->andwhere($qb->expr()->isNotNull('ps.dayUntilDue'))
                        ->andWhere($qb->expr()->lte("DATE_DIFF(rpb.debtStartAt, CURRENT_DATE())", ':checkDate'))
                        ->setParameter('checkDate', $checkDate)
                        ->setParameter('user', $user)
                        ->getQuery()
                        ->getResult()
        ;
    }

    /**
     * 
     * @param User $user
     * @return type
     */
    public function nullifyTenantUserOfPropertyByUser(User $user) {
        $qb = $this->createQueryBuilder('p');

        return $qb->update($this->getEntityName(), 'p')
                        ->set('p.tenantUser', 'NULL')
                        ->where($qb->expr()->eq('p.tenantUser', ':user'))
                        ->setParameter('user', $user)
                        ->getQuery()
                        ->execute()
        ;
    }

    /**
     * Change QueryBuilder by params
     *
     * @param QueryBuilder   $qb
     * @param PropertyFilter $propertyFilter
     *
     * @return QueryBuilder
     */
    protected function modifyQbByParams(QueryBuilder $qb, PropertyFilter $propertyFilter) {
        if ($propertyFilter->getState()) {
            $qb->andWhere($qb->expr()->eq('pr.stateCode', ':state'))
                    ->setParameter('state', $propertyFilter->getState())
            ;
        }

        if ($propertyFilter->getCityId()) {
            $city = $this->getEntityManager()->getRepository('ErpCoreBundle:City')->find(
                    $propertyFilter->getCityId()
            );
            if ($city) {
                $qb->andWhere($qb->expr()->eq('pr.city', ':city'))
                        ->setParameter('city', $city)
                ;
            }
        }

        if ($propertyFilter->getAddress()) {
            $qb->andWhere($qb->expr()->like('LOWER(pr.address)', ':address'))
                    ->setParameter('address', '%' . strtolower($propertyFilter->getAddress()) . '%')
            ;
        }

        $zip = $propertyFilter->getZip();
        if ($zip && ctype_digit($zip)) {
            $qb->andWhere($qb->expr()->eq('pr.zip', ':zip'))
                    ->setParameter('zip', $zip)
            ;
        }

        if ($propertyFilter->getBathrooms()) {
            $qb->andWhere($qb->expr()->eq('pr.ofBaths', ':ofBaths'))
                    ->setParameter('ofBaths', $propertyFilter->getBathrooms())
            ;
        }

        if ($propertyFilter->getBedrooms()) {
            $qb->andWhere($qb->expr()->eq('pr.ofBeds', ':ofBeds'))
                    ->setParameter('ofBeds', $propertyFilter->getBedrooms())
            ;
        }

        $squareFootage = $propertyFilter->getSquareFootage();
        if ($squareFootage && ctype_digit($squareFootage)) {
            $qb->andWhere($qb->expr()->gte('pr.squareFootage', ':squareFootage'))
                    ->setParameter('squareFootage', $squareFootage)
            ;
        }

        $squareFootage = $propertyFilter->getSquareFootage();
        if ($squareFootage && ctype_digit($squareFootage)) {
            $qb->andWhere($qb->expr()->gte('pr.squareFootage', ':squareFootage'))
                    ->setParameter('squareFootage', $squareFootage)
            ;
        }

        $order = $propertyFilter->getOrder();

        if ($order) {
            $parts = explode('_', $order);
            $qb->orderBy('pr.' . $parts[0], $parts[1]);
        }

        return $qb;
    }

    /**
     * Get QueryBuilder for available properties by user zip
     *
     * @param User $user
     * @param int  $maxResults
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    protected function getQbForAvailableByUserZip(User $user, $maxResults = Property::LIMIT_AVAILABLE_PER_PAGE) {
        $qb = $this->createQueryBuilder('pr');

        return $qb
                        ->where($qb->expr()->eq('pr.zip', ':zip'))
                        ->andWhere($qb->expr()->eq('pr.status', ':status'))
                        ->setParameter('zip', $user->getPostalCode())
                        ->setParameter('status', Property::STATUS_AVAILABLE)
                        ->orderBy('pr.updatedDate', 'DESC')
                        ->setMaxResults($maxResults);
    }

    /**
     * Get QueryBuilder for available properties by user city
     *
     * @param User  $user
     * @param array $exceptions
     * @param int   $maxResults
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    protected function getQbForAvailableByUserCity(User $user, array $exceptions = [], $maxResults = Property::LIMIT_AVAILABLE_PER_PAGE) {
        $qb = $this->createQueryBuilder('pr');

        $qb
                ->where($qb->expr()->eq('pr.city', ':city'))
                ->andWhere($qb->expr()->eq('pr.status', ':status'))
                ->setParameter('city', $user->getCity())
                ->setParameter('status', Property::STATUS_AVAILABLE)
                ->orderBy('pr.updatedDate', 'DESC')
                ->setMaxResults($maxResults)
        ;

        if ($exceptions) {
            foreach ($exceptions as $exception) {
                $ids[] = $exception->getId();
            }

            $qb = $qb->andWhere($qb->expr()->notIn('pr.id', $ids));
        }

        return $qb;
    }

    /**
     * Get QueryBuilder for available properties by user state
     *
     * @param User  $user
     * @param array $exceptions
     * @param int   $maxResults
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    protected function getQbForAvailableByUserState(User $user, array $exceptions = [], $maxResults = Property::LIMIT_AVAILABLE_PER_PAGE) {
        $qb = $this->createQueryBuilder('pr');

        $qb
                ->where($qb->expr()->eq('pr.stateCode', ':stateCode'))
                ->andWhere($qb->expr()->eq('pr.status', ':status'))
                ->setParameter('stateCode', $user->getState())
                ->setParameter('status', Property::STATUS_AVAILABLE)
                ->orderBy('pr.updatedDate', 'DESC')
                ->setMaxResults($maxResults)
        ;

        if ($exceptions) {
            foreach ($exceptions as $exception) {
                $ids[] = $exception->getId();
            }

            $qb = $qb->andWhere($qb->expr()->notIn('pr.id', $ids));
        }

        return $qb;
    }

}
